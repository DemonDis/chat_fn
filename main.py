import json
import requests
import os
from dotenv import load_dotenv

load_dotenv()

class HydraAIClient:
    def __init__(self, api_key=os.getenv("API_KEY"), base_url=os.getenv("BASE_URL")):
        self.api_key = api_key
        self.base_url = base_url
        self.headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        self.working_endpoint = "/chat/completions"
    
    def chat_completion(self, messages, tools=None, model="gpt-4o-mini"):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–π"""
        url = self.base_url + self.working_endpoint
        
        payload = {
            "model": model,
            "messages": messages,
            "max_tokens": 500,
            "temperature": 0.7
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
        if tools:
            payload["tools"] = tools
            payload["tool_choice"] = "auto"
        
        try:
            response = requests.post(url, json=payload, headers=self.headers, timeout=30)
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (—Ñ—É–Ω–∫—Ü–∏–π)
class ToolManager:
    def __init__(self):
        self.available_tools = self._define_tools()
    
    def _define_tools(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏"""
        return [
            {
                "type": "function",
                "function": {
                    "name": "get_current_weather",
                    "description": "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "location": {
                                "type": "string",
                                "description": "–ì–æ—Ä–æ–¥ –∏ —Å—Ç—Ä–∞–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è",
                            },
                            "unit": {
                                "type": "string", 
                                "enum": ["celsius", "fahrenheit"],
                                "description": "–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã",
                            }
                        },
                        "required": ["location"],
                    },
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "calculate_math_expression",
                    "description": "–í—ã—á–∏—Å–ª–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "expression": {
                                "type": "string",
                                "description": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, '2 + 2 * 3'",
                            }
                        },
                        "required": ["expression"],
                    },
                }
            },
            {
                "type": "function",
                "function": {
                    "name": "get_current_time",
                    "description": "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ",
                    "parameters": {
                        "type": "object", 
                        "properties": {
                            "location": {
                                "type": "string",
                                "description": "–ì–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, '–õ–æ–Ω–¥–æ–Ω' –∏–ª–∏ '–ú–æ—Å–∫–≤–∞'",
                            }
                        },
                        "required": ["location"],
                    },
                }
            }
        ]
    
    def execute_tool(self, tool_name, arguments):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏"""
        if tool_name == "get_current_weather":
            return self._get_weather(arguments)
        elif tool_name == "calculate_math_expression":
            return self._calculate_math(arguments)
        elif tool_name == "get_current_time":
            return self._get_time(arguments)
        else:
            return f"–§—É–Ω–∫—Ü–∏—è {tool_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    def _get_weather(self, args):
        """–ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—ã–ª –±—ã –≤—ã–∑–æ–≤ API –ø–æ–≥–æ–¥—ã)"""
        location = args.get("location", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        unit = args.get("unit", "celsius")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥—ã
        weather_data = {
            "–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è": {"temp": -5, "condition": "—Å–Ω–µ–≥", "humidity": 85},
            "–õ–æ–Ω–¥–æ–Ω, –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è": {"temp": 8, "condition": "–¥–æ–∂–¥—å", "humidity": 90},
            "–ù—å—é-–ô–æ—Ä–∫, –°–®–ê": {"temp": 15, "condition": "—è—Å–Ω–æ", "humidity": 65},
            "–¢–æ–∫–∏–æ, –Ø–ø–æ–Ω–∏—è": {"temp": 12, "condition": "–æ–±–ª–∞—á–Ω–æ", "humidity": 70}
        }
        
        if location in weather_data:
            data = weather_data[location]
            return f"–ü–æ–≥–æ–¥–∞ –≤ {location}: {data['temp']}¬∞C, {data['condition']}, –≤–ª–∞–∂–Ω–æ—Å—Ç—å {data['humidity']}%"
        else:
            return f"–ü–æ–≥–æ–¥–∞ –¥–ª—è {location}: –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    def _calculate_math(self, args):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ"""
        expression = args.get("expression", "")
        try:
            # –í–ù–ò–ú–ê–ù–ò–ï: –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤—ã—á–∏—Å–ª–µ–Ω–∏—è!
            result = eval(expression)
            return f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {expression} = {result}"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {e}"
    
    def _get_time(self, args):
        """–ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—ã–ª –±—ã –≤—ã–∑–æ–≤ API –≤—Ä–µ–º–µ–Ω–∏)"""
        location = args.get("location", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        time_data = {
            "–ú–æ—Å–∫–≤–∞": "15:30 (MSK)",
            "–õ–æ–Ω–¥–æ–Ω": "12:30 (GMT)", 
            "–ù—å—é-–ô–æ—Ä–∫": "07:30 (EST)",
            "–¢–æ–∫–∏–æ": "21:30 (JST)"
        }
        
        if location in time_data:
            return f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ {location}: {time_data[location]}"
        else:
            return f"–í—Ä–µ–º—è –¥–ª—è {location}: –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

def main():
    client = HydraAIClient()
    tool_manager = ToolManager()
    
    messages = [
        {
            "role": "system", 
            "content": """–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –ø–æ–≥–æ–¥–µ, –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –Ω—É–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏.
–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç."""
        }
    ]
    
    print("=== Hydra AI –ß–∞—Ç-–±–æ—Ç —Å –≤—ã–∑–æ–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–π ===")
    print("‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ –∑–∞–¥–∞–Ω–∏—é: –≤—ã–∑–æ–≤ –≤–Ω–µ—à–Ω–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    print("  - get_current_weather: –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã")
    print("  - calculate_math_expression: –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")  
    print("  - get_current_time: –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏")
    print("\n–ù–∞–ø–∏—à–∏—Ç–µ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.\n")
    
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö
    use_tools = True
    
    while True:
        user_input = input("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ")
        if user_input.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit']:
            break
            
        messages.append({"role": "user", "content": user_input})
        
        # –®–∞–≥ 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö
        response_data = client.chat_completion(
            messages=messages, 
            tools=tool_manager.available_tools if use_tools else None,
            model="gpt-4o-mini"
        )
        
        if not response_data:
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API")
            messages.pop()
            continue
        
        # –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º tools (–µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ)
        use_tools = False
        
        response_message = response_data["choices"][0]["message"]
        
        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –º–æ–¥–µ–ª—å –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
        if "tool_calls" in response_message and response_message["tool_calls"]:
            print("üîÑ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—ã–∑—ã–≤–∞–µ—Ç –≤–Ω–µ—à–Ω—é—é —Ñ—É–Ω–∫—Ü–∏—é...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–∑–æ–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
            messages.append(response_message)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
            for tool_call in response_message["tool_calls"]:
                function_name = tool_call["function"]["name"]
                function_args = json.loads(tool_call["function"]["arguments"])
                
                print(f"   üìû –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏: {function_name} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {function_args}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
                function_response = tool_manager.execute_tool(function_name, function_args)
                
                print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏: {function_response}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
                messages.append({
                    "role": "tool",
                    "tool_call_id": tool_call["id"],
                    "content": function_response,
                })
            
            # –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ñ—É–Ω–∫—Ü–∏–π –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–æ–¥–µ–ª—å
            second_response = client.chat_completion(messages=messages)
            
            if second_response:
                final_message = second_response["choices"][0]["message"]
                assistant_reply = final_message["content"]
                print(f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {assistant_reply}")
                messages.append(final_message)
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
                
        else:
            # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            assistant_reply = response_message["content"]
            print(f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {assistant_reply}")
            messages.append(response_message)

if __name__ == "__main__":
    main()
